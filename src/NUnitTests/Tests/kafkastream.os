
Перем юТест;

Перем СервераОблачнойКафки;
Перем ПользовательОблачнойКафки;
Перем ПарольОблачнойКафки;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	СИ = Новый СистемнаяИнформация();
	// https://customer.cloudkarafka.com/instance
	СервераОблачнойКафки = СИ.ПолучитьПеременнуюСреды("CLOUDKARAFKA_BROKERS");
	ПользовательОблачнойКафки = СИ.ПолучитьПеременнуюСреды("CLOUDKARAFKA_USERNAME");
	ПарольОблачнойКафки = СИ.ПолучитьПеременнуюСреды("CLOUDKARAFKA_PASSWORD");

	ВсеТесты.Добавить("ТестДолжен_ПроверитьСозданиеОбъектаИсточника");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьОтправкуСообщения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеСообщения");

	СервераОблачнойКафки = "";
	
	ПользовательОблачнойКафки = "";
	ПарольОблачнойКафки = "";
	
	Возврат ВсеТесты;
	
КонецФункции


КонфигураторПотоковойОбработки = Новый КонфигураторПотокаКафка(
	"ФункцияЗаписиДанныхВГрадусахЦельсия", 
	"ФункцияПолученияДанныхВГрадусахФаренгейте");
КонфигураторПотоковойОбработки.ИдентификаторПриложения = "потоковая-обработка-температура";
КонфигураторПотоковойОбработки.СервераОбработки = "172.31.1.201:9092;172.31.1.202:9092";
КонфигураторПотоковойОбработки.КоличествоПотоковОбработки = 2;

ПотоковыйОбработчик = Новый ПотоковыйОбработчикКафка("телеметрия-температуры-фаренгейт")
	.СоздатьПоток().ВходящийТипДанных(Тип.Строка).ИсходящийТипДанных(Тип.Строка)
	.Отправить("телеметрия-температуры-цельсий");

КлючОтменыЗадания = ПотоковыйОбработчик.ПостроитьТополологию(КонфигураторПотоковойОбработки)
	.ЗапуститьПроцесс();				

Процедура ФункцияЗаписиДанныхВГрадусахЦельсия(Знач объектВходящиеДанные, СырыеДанные)
	НаЧтоУмножаем = ?(ЗначениеСобытия.Приход, 1, -1);
	АгрегируемоеЗначение = АгрегируемоеЗначение + (ЗначениеСобытия.ИзменениеДенег * НаЧтоУмножаем);
КонецПроцедуры

Процедура ФункцияПолученияДанныхВГрадусахФаренгейте(Знач СырыеДанные, объектВходящиеДанные)
	НаЧтоУмножаем = ?(ЗначениеСобытия.Приход, 1, -1);
	АгрегируемоеЗначение = АгрегируемоеЗначение + (ЗначениеСобытия.ИзменениеДенег * НаЧтоУмножаем);
КонецПроцедуры

Процедура ФункцияАгрегацииДолгов(Знач КлючСобытия, Знач ЗначениеСобытия, АгрегируемоеЗначение)
	НаЧтоУмножаем = ?(ЗначениеСобытия.Приход, 1, -1);
	АгрегируемоеЗначение = АгрегируемоеЗначение + (ЗначениеСобытия.ИзменениеДенег * НаЧтоУмножаем);
КонецПроцедуры

КонфигураторПотоковойОбработки = Новый КонфигураторПотокаКафка(
	"ФункцияДесериализации", "ФункцияСериализации");
КонфигураторПотоковойОбработки.ИдентификаторПриложения = "потоковая-обработка-изменения-долга";
КонфигураторПотоковойОбработки.СервераОбработки = "172.31.1.201:9092;172.31.1.202:9092";
КонфигураторПотоковойОбработки.КоличествоПотоковОбработки = 2;

ПотоковыйОбработчик = Новый ПотоковыйОбработчикКафка("история-изменений-долга").СоздатьПоток().
	ВходящийТипДанных(Тип.Строка).ИсходящийТипДанных(Тип.Строка)
		.ГруппироватьПоКлючу("идентификатор-клиента")
		.Агрегировать("ФункцияАгрегацииДолгов")
		.СоздатьТаблицуСостояния("актуальный-долг-ksql")
		.Отправить("изменение-общей-задолженности-клиента");

КлючОтменыЗадания = ПотоковыйОбработчик.ПостроитьТополологию(КонфигураторПотоковойОбработки)
	.ЗапуститьПроцесс();				

